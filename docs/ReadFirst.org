#+TITLE: Makefile.toml Development Guide
#+AUTHOR: Jayden Development Team
#+DATE: 2025-05-25

* Table of Contents :toc:
- [[#introduction][Introduction]]
  - [[#prerequisites][Prerequisites]]
- [[#development-tasks][Development Tasks]]
  - [[#core-development-commands][Core Development Commands]]
  - [[#code-quality-tasks][Code Quality Tasks]]
  - [[#build-and-test-tasks][Build and Test Tasks]]
- [[#database-management][Database Management]]
  - [[#database-architecture][Database Architecture]]
  - [[#basic-database-operations][Basic Database Operations]]
  - [[#database-monitoring-and-access][Database Monitoring and Access]]
  - [[#data-management-tasks][Data Management Tasks]]
- [[#common-workflows][Common Workflows]]
  - [[#starting-development][Starting Development]]
  - [[#database-development-workflow][Database Development Workflow]]
  - [[#code-quality-workflow][Code Quality Workflow]]
  - [[#build-and-release-workflow][Build and Release Workflow]]
- [[#docker-compose-integration][Docker Compose Integration]]
  - [[#compose-file-structure][Compose File Structure]]
  - [[#key-features][Key Features]]
  - [[#manual-docker-compose-commands][Manual Docker Compose Commands]]
- [[#troubleshooting][Troubleshooting]]
  - [[#common-issues][Common Issues]]
  - [[#recovery-commands][Recovery Commands]]
- [[#file-structure-context][File Structure Context]]
- [[#best-practices][Best Practices]]
  - [[#development][Development]]
  - [[#database-management-1][Database Management]]
  - [[#code-quality][Code Quality]]
  - [[#docker-compose-benefits][Docker Compose Benefits]]
- [[#advanced-usage][Advanced Usage]]
  - [[#environment-customization][Environment Customization]]
  - [[#adding-database-services][Adding Database Services]]
  - [[#integration-with-cicd][Integration with CI/CD]]
- [[#conclusion][Conclusion]]

* Introduction
This document provides a comprehensive guide to using the =Makefile.toml= configuration for the Jayden Blog project. The Makefile uses =cargo-make= to provide convenient shortcuts for common development tasks including Rust development, database management, and project maintenance.

** Prerequisites

- [[https://github.com/sagiegurari/cargo-make][cargo-make]] installed: =cargo install cargo-make=
- Docker and Docker Compose installed and running
- Rust toolchain with Cargo

* Development Tasks
** Core Development Commands
*** =cargo make dev=
*Purpose:* Start development server with hot-reload and linting
*Working Directory:* =./crates/gateways/web_server=
*Features:*
- Automatically installs =cargo-watch= if not present
- Runs =clippy= linter on file changes
- Restarts server on code changes
- Debug logging enabled (=RUST_LOG=debug=)

#+BEGIN_SRC bash
cargo make dev
#+END_SRC

*** =cargo make debug=
*Purpose:* Alias for =dev= task with same functionality
*Usage:* Same as =dev= command

#+BEGIN_SRC bash
cargo make debug
#+END_SRC

** Code Quality Tasks
*** =cargo make format=
*Purpose:* Format all Rust code using =rustfmt=
*Features:*
- Automatically installs =rustfmt= if not present
- Formats code and writes changes to files

#+BEGIN_SRC bash
cargo make format
#+END_SRC

*** =cargo make fix=
*Purpose:* Automatically fix Rust compiler warnings
*Features:*
- Allows fixing code even with uncommitted changes
- Uses =cargo fix --allow-dirty=

#+BEGIN_SRC bash
cargo make fix
#+END_SRC

*** =cargo make lint=
*Purpose:* Run Clippy linter for code analysis

#+BEGIN_SRC bash
cargo make lint
#+END_SRC

*** =cargo make lint-staged=
*Purpose:* Run lint-staged for Git pre-commit hooks
*Requires:* Node.js and =lint-staged= package

#+BEGIN_SRC bash
cargo make lint-staged
#+END_SRC

** Build and Test Tasks
*** =cargo make clean=
*Purpose:* Clean build artifacts

#+BEGIN_SRC bash
cargo make clean
#+END_SRC

*** =cargo make build=
*Purpose:* Build project in release mode

#+BEGIN_SRC bash
cargo make build
#+END_SRC

*** =cargo make test=
*Purpose:* Run tests using =cargo-nextest=
*Requires:* =cargo-nextest= installed

#+BEGIN_SRC bash
cargo make test
#+END_SRC

*** =cargo make test-watch=
*Purpose:* Run tests with file watching
*Features:*
- Automatically installs =cargo-watch=
- Reruns tests on file changes

#+BEGIN_SRC bash
cargo make test-watch
#+END_SRC

* Database Management
** Database Architecture
The project uses Docker Compose for database management with a dedicated PostgreSQL service. All database operations use the compose file at =deployment/docker/docker-compose.postgres.yml=.

** Basic Database Operations
*** =cargo make db-build=
*Purpose:* Build PostgreSQL Docker image
*Docker Compose File:* =deployment/docker/docker-compose.postgres.yml=
*Features:*
- Builds the database image without starting containers
- Useful for rebuilding after Dockerfile changes

#+BEGIN_SRC bash
cargo make db-build
#+END_SRC

*** =cargo make db-start=
*Purpose:* Start PostgreSQL database using Docker Compose
*Features:*
- Starts database in detached mode
- Automatically builds image if needed (=--build= flag)
- Creates necessary volumes and networks

#+BEGIN_SRC bash
cargo make db-start
#+END_SRC

*** =cargo make db-restart=
*Purpose:* Rebuild and restart PostgreSQL database
*Features:*
- Equivalent to =db-start= with forced rebuild
- Useful when you want to ensure latest changes are applied

#+BEGIN_SRC bash
cargo make db-restart
#+END_SRC

*** =cargo make db-stop=
*Purpose:* Stop PostgreSQL database containers
*Features:*
- Stops all services defined in compose file
- Preserves data volumes

#+BEGIN_SRC bash
cargo make db-stop
#+END_SRC

** Database Monitoring and Access
*** =cargo make db-logs=
*Purpose:* View PostgreSQL database logs in real-time
*Features:*
- Follows log output for the =database= service
- Shows container startup and query logs

#+BEGIN_SRC bash
cargo make db-logs
#+END_SRC

*** =cargo make db-shell=
*Purpose:* Connect to PostgreSQL interactive shell
*Features:*
- Opens =psql= in the database container
- Pre-configured with user =jayden= and database =jayden-blog=
- Interactive shell for direct SQL operations

#+BEGIN_SRC bash
cargo make db-shell
#+END_SRC

** Data Management Tasks
*** =cargo make db-reset=
*Purpose:* Complete database reset with fresh data
*Actions:*
1. Stop and remove all containers with volumes (=down -v=)
2. Remove the =my_pgdata= volume if it exists
3. Start fresh containers with rebuilt images

#+BEGIN_SRC bash
cargo make db-reset
#+END_SRC

*** =cargo make db-fresh=
*Purpose:* Fresh database setup with confirmation
*Dependencies:* Runs =db-reset= first
*Features:*
- Provides visual confirmation of reset completion
- Waits 5 seconds for database to stabilize
- Shows database logs for verification

#+BEGIN_SRC bash
cargo make db-fresh
#+END_SRC

* Common Workflows
** Starting Development
*** Initial Setup
#+BEGIN_SRC bash
# Start the database
cargo make db-start

# Verify database is running
cargo make db-logs

# Start development server
cargo make dev
#+END_SRC

*** Daily Development Workflow
#+BEGIN_SRC bash
# Start database (if not running)
cargo make db-start

# Start hot-reload development
cargo make dev
#+END_SRC

** Database Development Workflow
*** First Time Setup
#+BEGIN_SRC bash
# Build and start database
cargo make db-start

# Check logs to ensure successful startup
cargo make db-logs

# Connect to database shell to verify
cargo make db-shell
#+END_SRC

*** Reset Database During Development
#+BEGIN_SRC bash
# Complete reset with fresh data
cargo make db-fresh

# Or quick reset without confirmation
cargo make db-reset
#+END_SRC

*** Database Debugging
#+BEGIN_SRC bash
# Check if database is running
docker compose -f deployment/docker/docker-compose.postgres.yml ps

# View detailed logs
cargo make db-logs

# Connect to database for manual inspection
cargo make db-shell
#+END_SRC

** Code Quality Workflow
*** Before Committing
#+BEGIN_SRC bash
# Format code
cargo make format

# Fix compiler warnings
cargo make fix

# Run linter
cargo make lint

# Run tests
cargo make test
#+END_SRC

*** Continuous Testing During Development
#+BEGIN_SRC bash
# Run tests with file watching
cargo make test-watch
#+END_SRC

** Build and Release Workflow
*** Clean Build
#+BEGIN_SRC bash
# Clean previous builds
cargo make clean

# Build in release mode
cargo make build
#+END_SRC

* Docker Compose Integration
** Compose File Structure
The database management uses a dedicated compose file:
=deployment/docker/docker-compose.postgres.yml=

** Key Features
- **Service Isolation:** Database runs as a dedicated service named =database=
- **Volume Persistence:** Uses =my_pgdata= volume for data persistence
- **Network Management:** Automatic network creation for service communication
- **Environment Configuration:** Database credentials and settings defined in compose file

** Manual Docker Compose Commands
If you need to run Docker Compose commands directly:

#+BEGIN_SRC bash
# View all services status
docker compose -f deployment/docker/docker-compose.postgres.yml ps

# Follow logs for specific service
docker compose -f deployment/docker/docker-compose.postgres.yml logs -f database

# Execute commands in running container
docker compose -f deployment/docker/docker-compose.postgres.yml exec database psql -U jayden -d jayden-blog

# Stop with volume removal
docker compose -f deployment/docker/docker-compose.postgres.yml down -v
#+END_SRC

* Troubleshooting
** Common Issues
*** Database Connection Issues
1. Check if containers are running:
   #+BEGIN_SRC bash
   docker compose -f deployment/docker/docker-compose.postgres.yml ps
   #+END_SRC

2. View database logs:
   #+BEGIN_SRC bash
   cargo make db-logs
   #+END_SRC

3. Restart database:
   #+BEGIN_SRC bash
   cargo make db-restart
   #+END_SRC

*** Port Conflicts
- Check if port 5432 is in use by another service
- Stop conflicting services or modify port in compose file

*** Permission Issues
- Ensure Docker daemon is running
- Check Docker permissions for your user
- On Linux, ensure your user is in the =docker= group

*** Volume Issues
- If data seems corrupted, try a complete reset:
  #+BEGIN_SRC bash
  cargo make db-fresh
  #+END_SRC

*** Build Issues
- Clean build artifacts:
  #+BEGIN_SRC bash
  cargo make clean
  #+END_SRC

- Rebuild database image:
  #+BEGIN_SRC bash
  cargo make db-build
  #+END_SRC

** Recovery Commands
*** Complete Environment Reset
#+BEGIN_SRC bash
# Stop all database services
cargo make db-stop

# Clean build artifacts
cargo make clean

# Fresh database setup
cargo make db-fresh

# Start development
cargo make dev
#+END_SRC

*** Database Recovery Only
#+BEGIN_SRC bash
# Complete database reset
cargo make db-fresh

# Verify database is working
cargo make db-shell
#+END_SRC

* File Structure Context
The Makefile.toml is designed to work with this project structure:

#+BEGIN_SRC
├── crates/
│   └── gateways/
│       └── web_server/              # Development server location
├── deployment/
│   └── docker/
│       ├── docker-compose.postgres.yml  # PostgreSQL compose configuration
│       └── Dockerfile.postgres          # PostgreSQL Dockerfile
├── sql/
│   ├── 0001_initial.sql            # Database initialization scripts
│   ├── 0002_user.sql
│   └── 0003_update_timestamps.sql
└── Makefile.toml                   # This configuration file
#+END_SRC

* Best Practices
** Development
- Use =cargo make dev= for daily development with hot-reload
- Run =cargo make format= and =cargo make lint= before commits
- Use =cargo make test-watch= for continuous testing
- Keep database running during development sessions

** Database Management
- Use =cargo make db-start= for regular database startup
- Use =cargo make db-fresh= when you need completely clean data
- Always check =cargo make db-logs= if something seems wrong
- Use =cargo make db-shell= for direct database inspection

** Code Quality
- Run the full quality check workflow before pushing:
  #+BEGIN_SRC bash
  cargo make format && cargo make fix && cargo make lint && cargo make test
  #+END_SRC

** Docker Compose Benefits
- **Reproducible Environment:** Same database setup across all machines
- **Easy Cleanup:** Volume management handled automatically
- **Service Isolation:** Database runs independently of other services
- **Network Management:** Automatic container networking

* Advanced Usage
** Environment Customization
The compose file can be customized for different environments by:
- Creating environment-specific compose files
- Using =.env= files for variable overrides
- Extending the base compose configuration

** Adding Database Services
To add additional database-related services:
1. Modify =docker-compose.postgres.yml=
2. Add corresponding tasks in =Makefile.toml=
3. Update this documentation

** Integration with CI/CD
The Makefile tasks are designed to work in CI/CD environments:

#+BEGIN_SRC bash
# CI workflow example
cargo make db-start
cargo make test
cargo make db-stop
#+END_SRC

* Conclusion
This updated Makefile.toml provides a robust, Docker Compose-based development environment for the Jayden Blog project. The compose-based approach offers better service management, easier troubleshooting, and more professional deployment practices.

Key benefits of the new approach:
- **Professional Database Management:** Using Docker Compose instead of raw docker commands
- **Better Service Isolation:** Database runs as a proper service
- **Easier Troubleshooting:** Centralized logging and status checking
- **Scalable Architecture:** Easy to add more services in the future

For questions or contributions, please refer to the project documentation or contact [[jayden.dangvu@gmail.com]] or [[https://jaydendang.com][JaydenBlog]]
