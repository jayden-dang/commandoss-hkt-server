use uuid::Uuid;

use crate::application::use_cases::VulnerabilityUseCases;
use crate::domain::Vulnerability;
use crate::Result;

pub struct VulnerabilityHandler {
    use_cases: VulnerabilityUseCases,
}

impl VulnerabilityHandler {
    pub fn new(use_cases: VulnerabilityUseCases) -> Self {
        Self { use_cases }
    }

    pub async fn get_vulnerability(&self, id: Uuid) -> Result<Vulnerability> {
        self.use_cases.get_vulnerability(id).await
    }

    pub async fn create_vulnerability(&self, vulnerability: &Vulnerability) -> Result<Vulnerability> {
        self.use_cases.create_vulnerability(vulnerability).await
    }

    pub async fn update_vulnerability(&self, vulnerability: &Vulnerability) -> Result<Vulnerability> {
        self.use_cases.update_vulnerability(vulnerability).await
    }

    pub async fn delete_vulnerability(&self, id: Uuid) -> Result<()> {
        self.use_cases.delete_vulnerability(id).await
    }

    // TODO: Add more handler methods as needed
}