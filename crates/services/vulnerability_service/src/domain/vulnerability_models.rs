use chrono::{DateTime, Utc};
use serde::{Deserialize, Serialize};
use uuid::Uuid;

#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum SeverityLevel {
    Critical,
    High,
    Medium,
    Low,
}

impl From<String> for SeverityLevel {
    fn from(s: String) -> Self {
        match s.to_lowercase().as_str() {
            "critical" => SeverityLevel::Critical,
            "high" => SeverityLevel::High,
            "medium" => SeverityLevel::Medium,
            "low" => SeverityLevel::Low,
            _ => SeverityLevel::Low,
        }
    }
}

impl ToString for SeverityLevel {
    fn to_string(&self) -> String {
        match self {
            SeverityLevel::Critical => "critical".to_string(),
            SeverityLevel::High => "high".to_string(),
            SeverityLevel::Medium => "medium".to_string(),
            SeverityLevel::Low => "low".to_string(),
        }
    }
}

#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum VulnerabilityStatus {
    Open,
    InProgress,
    Resolved,
    FalsePositive,
    Ignored,
}

impl From<String> for VulnerabilityStatus {
    fn from(s: String) -> Self {
        match s.to_lowercase().as_str() {
            "open" => VulnerabilityStatus::Open,
            "in_progress" => VulnerabilityStatus::InProgress,
            "resolved" => VulnerabilityStatus::Resolved,
            "false_positive" => VulnerabilityStatus::FalsePositive,
            "ignored" => VulnerabilityStatus::Ignored,
            _ => VulnerabilityStatus::Open,
        }
    }
}

impl ToString for VulnerabilityStatus {
    fn to_string(&self) -> String {
        match self {
            VulnerabilityStatus::Open => "open".to_string(),
            VulnerabilityStatus::InProgress => "in_progress".to_string(),
            VulnerabilityStatus::Resolved => "resolved".to_string(),
            VulnerabilityStatus::FalsePositive => "false_positive".to_string(),
            VulnerabilityStatus::Ignored => "ignored".to_string(),
        }
    }
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct Vulnerability {
    pub id: Uuid,
    pub repository_id: Uuid,
    pub vulnerability_type: String,
    pub severity: SeverityLevel,
    pub status: VulnerabilityStatus,
    pub title: String,
    pub description: String,
    pub file_path: String,
    pub line_number: Option<i32>,
    pub code_snippet: Option<String>,
    pub detected_by: String,
    pub detected_at: DateTime<Utc>,
    pub resolved_at: Option<DateTime<Utc>>,
    pub resolved_by: Option<Uuid>,
    pub patch_proposal_id: Option<Uuid>,
    pub cve_id: Option<String>,
    pub cvss_score: Option<f32>,
    pub created_at: DateTime<Utc>,
    pub updated_at: DateTime<Utc>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct VulnerabilitySummary {
    pub repository_id: Uuid,
    pub total_count: i64,
    pub by_severity: SeverityBreakdown,
    pub by_status: StatusBreakdown,
    pub average_resolution_time: Option<i64>, // in hours
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct SeverityBreakdown {
    pub critical: i64,
    pub high: i64,
    pub medium: i64,
    pub low: i64,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct StatusBreakdown {
    pub open: i64,
    pub in_progress: i64,
    pub resolved: i64,
    pub false_positive: i64,
    pub ignored: i64,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct VulnerabilityType {
    pub type_name: String,
    pub count: i64,
    pub average_severity: f32,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct VulnerabilityFilter {
    pub repository_id: Option<Uuid>,
    pub severity: Option<Vec<SeverityLevel>>,
    pub status: Option<VulnerabilityStatus>,
    pub vulnerability_type: Option<String>,
    pub detected_after: Option<DateTime<Utc>>,
    pub detected_before: Option<DateTime<Utc>>,
    pub search_query: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct BulkUpdateRequest {
    pub vulnerability_ids: Vec<Uuid>,
    pub status: Option<VulnerabilityStatus>,
    pub assigned_to: Option<Uuid>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct BulkUpdateResult {
    pub updated_count: i64,
    pub failed_ids: Vec<Uuid>,
    pub errors: Vec<String>,
}