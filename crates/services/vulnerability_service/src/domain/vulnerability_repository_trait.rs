use async_trait::async_trait;
use uuid::Uuid;

use super::vulnerability_models::*;
use crate::Result;

#[async_trait]
pub trait VulnerabilityRepository: Send + Sync {
    // CRUD Operations
    async fn create(&self, vulnerability: &Vulnerability) -> Result<Vulnerability>;
    
    async fn get_by_id(&self, id: Uuid) -> Result<Vulnerability>;
    
    async fn update(&self, vulnerability: &Vulnerability) -> Result<Vulnerability>;
    
    async fn delete(&self, id: Uuid) -> Result<()>;
    
    // List and Search
    async fn list(
        &self,
        filter: &VulnerabilityFilter,
        offset: i64,
        limit: i64,
    ) -> Result<Vec<Vulnerability>>;
    
    async fn count(&self, filter: &VulnerabilityFilter) -> Result<i64>;
    
    async fn search(&self, query: &str, limit: i64) -> Result<Vec<Vulnerability>>;
    
    // Repository-specific queries
    async fn get_by_repository(
        &self,
        repository_id: Uuid,
        offset: i64,
        limit: i64,
    ) -> Result<Vec<Vulnerability>>;
    
    async fn get_repository_summary(&self, repository_id: Uuid) -> Result<VulnerabilitySummary>;
    
    // Type and Severity queries
    async fn get_vulnerability_types(&self) -> Result<Vec<VulnerabilityType>>;
    
    async fn get_by_severity(
        &self,
        severity: SeverityLevel,
        offset: i64,
        limit: i64,
    ) -> Result<Vec<Vulnerability>>;
    
    // Status updates
    async fn update_status(
        &self,
        id: Uuid,
        status: VulnerabilityStatus,
        resolved_by: Option<Uuid>,
    ) -> Result<()>;
    
    // Bulk operations
    async fn bulk_update(&self, request: &BulkUpdateRequest) -> Result<BulkUpdateResult>;
    
    async fn bulk_export(&self, filter: &VulnerabilityFilter) -> Result<Vec<Vulnerability>>;
    
    // Audit trail
    async fn add_status_change(
        &self,
        vulnerability_id: Uuid,
        old_status: VulnerabilityStatus,
        new_status: VulnerabilityStatus,
        changed_by: Uuid,
    ) -> Result<()>;
}