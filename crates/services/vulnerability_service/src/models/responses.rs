use chrono::{DateTime, Utc};
use serde::{Deserialize, Serialize};
use uuid::Uuid;

use crate::domain::{
    BulkUpdateResult, SeverityBreakdown, StatusBreakdown, Vulnerability, VulnerabilitySummary,
    VulnerabilityType,
};

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct VulnerabilityResponse {
    pub vulnerability: Vulnerability,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct VulnerabilityListResponse {
    pub vulnerabilities: Vec<Vulnerability>,
    pub total_count: i64,
    pub page: u32,
    pub limit: u32,
    pub has_more: bool,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct VulnerabilitySummaryResponse {
    pub summary: VulnerabilitySummary,
    pub generated_at: DateTime<Utc>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct VulnerabilityTypesResponse {
    pub types: Vec<VulnerabilityType>,
    pub total_vulnerabilities: i64,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct BulkUpdateResponse {
    pub result: BulkUpdateResult,
    pub completed_at: DateTime<Utc>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ExportResponse {
    pub export_url: String,
    pub format: String,
    pub vulnerability_count: i64,
    pub expires_at: DateTime<Utc>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct StatusUpdateResponse {
    pub vulnerability_id: Uuid,
    pub old_status: String,
    pub new_status: String,
    pub updated_by: Option<Uuid>,
    pub updated_at: DateTime<Utc>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct SearchResponse {
    pub vulnerabilities: Vec<VulnerabilitySearchResult>,
    pub total_matches: i64,
    pub search_query: String,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct VulnerabilitySearchResult {
    pub id: Uuid,
    pub title: String,
    pub repository_name: String,
    pub severity: String,
    pub status: String,
    pub match_snippet: String,
    pub relevance_score: f32,
}