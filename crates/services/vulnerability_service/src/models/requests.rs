use chrono::{DateTime, Utc};
use serde::{Deserialize, Serialize};
use uuid::Uuid;

use crate::domain::{SeverityLevel, VulnerabilityStatus};

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ListVulnerabilitiesRequest {
    pub repository_id: Option<Uuid>,
    pub severity: Option<Vec<SeverityLevel>>,
    pub status: Option<VulnerabilityStatus>,
    pub page: Option<u32>,
    pub limit: Option<u32>,
}

impl Default for ListVulnerabilitiesRequest {
    fn default() -> Self {
        Self {
            repository_id: None,
            severity: None,
            status: None,
            page: Some(1),
            limit: Some(20),
        }
    }
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct UpdateVulnerabilityStatusRequest {
    pub status: VulnerabilityStatus,
    pub resolved_by: Option<Uuid>,
    pub comment: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct SearchVulnerabilitiesRequest {
    pub query: String,
    pub repository_id: Option<Uuid>,
    pub limit: Option<u32>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct BulkUpdateVulnerabilitiesRequest {
    pub vulnerability_ids: Vec<Uuid>,
    pub status: Option<VulnerabilityStatus>,
    pub assigned_to: Option<Uuid>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ExportVulnerabilitiesRequest {
    pub repository_id: Option<Uuid>,
    pub severity: Option<Vec<SeverityLevel>>,
    pub status: Option<VulnerabilityStatus>,
    pub format: ExportFormat,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub enum ExportFormat {
    Json,
    Csv,
    Pdf,
}