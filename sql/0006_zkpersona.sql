-- ZK-Persona Database Schema
-- This replaces the complex user management with ZK proof-focused tables

-- Table: behavior_inputs
-- Stores user behavior data for scoring
CREATE TABLE behavior_inputs (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    session_id VARCHAR(100),
    input_data JSONB NOT NULL,
    timestamp TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    processed BOOLEAN NOT NULL DEFAULT false,
    
    -- Indexes
    CONSTRAINT behavior_inputs_session_id_check CHECK (session_id IS NULL OR LENGTH(session_id) >= 1)
);

CREATE INDEX idx_behavior_inputs_session_id ON behavior_inputs(session_id);
CREATE INDEX idx_behavior_inputs_timestamp ON behavior_inputs(timestamp);
CREATE INDEX idx_behavior_inputs_processed ON behavior_inputs(processed);

-- Table: scoring_results  
-- Stores AI model scoring results
CREATE TABLE scoring_results (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    behavior_input_id UUID NOT NULL REFERENCES behavior_inputs(id) ON DELETE CASCADE,
    score DECIMAL(5,2) NOT NULL,
    model_version VARCHAR(50) NOT NULL,
    timestamp TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    
    -- Constraints
    CONSTRAINT scoring_results_score_range CHECK (score >= 0 AND score <= 100),
    CONSTRAINT scoring_results_model_version_check CHECK (LENGTH(model_version) >= 1)
);

CREATE INDEX idx_scoring_results_behavior_input_id ON scoring_results(behavior_input_id);
CREATE INDEX idx_scoring_results_score ON scoring_results(score);
CREATE INDEX idx_scoring_results_model_version ON scoring_results(model_version);
CREATE INDEX idx_scoring_results_timestamp ON scoring_results(timestamp);

-- Table: zkml_proofs
-- Stores ZK proofs and verification data
CREATE TABLE zkml_proofs (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    scoring_result_id UUID NOT NULL REFERENCES scoring_results(id) ON DELETE CASCADE,
    proof_data BYTEA NOT NULL,
    verification_key BYTEA NOT NULL,
    verified BOOLEAN NOT NULL DEFAULT false,
    blockchain_tx_hash VARCHAR(100),
    timestamp TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    
    -- Constraints
    CONSTRAINT zkml_proofs_proof_data_check CHECK (LENGTH(proof_data) > 0),
    CONSTRAINT zkml_proofs_verification_key_check CHECK (LENGTH(verification_key) > 0),
    CONSTRAINT zkml_proofs_tx_hash_check CHECK (blockchain_tx_hash IS NULL OR LENGTH(blockchain_tx_hash) >= 1)
);

CREATE INDEX idx_zkml_proofs_scoring_result_id ON zkml_proofs(scoring_result_id);
CREATE INDEX idx_zkml_proofs_verified ON zkml_proofs(verified);
CREATE INDEX idx_zkml_proofs_blockchain_tx_hash ON zkml_proofs(blockchain_tx_hash);
CREATE INDEX idx_zkml_proofs_timestamp ON zkml_proofs(timestamp);

-- Comments for documentation
COMMENT ON TABLE behavior_inputs IS 'Stores user behavior data for ZK-ML processing';
COMMENT ON TABLE scoring_results IS 'Stores AI model scoring results from behavior analysis';
COMMENT ON TABLE zkml_proofs IS 'Stores zero-knowledge proofs for privacy-preserving reputation scores';

COMMENT ON COLUMN behavior_inputs.session_id IS 'Optional session identifier for grouping related behaviors';
COMMENT ON COLUMN behavior_inputs.input_data IS 'JSON behavior data (on-chain activity, interactions, etc.)';
COMMENT ON COLUMN behavior_inputs.processed IS 'Whether this input has been processed by the scoring model';

COMMENT ON COLUMN scoring_results.score IS 'Reputation score from 0-100 generated by AI model';
COMMENT ON COLUMN scoring_results.model_version IS 'Version of the AI model used for scoring';

COMMENT ON COLUMN zkml_proofs.proof_data IS 'ZK-SNARK proof data proving score validity';
COMMENT ON COLUMN zkml_proofs.verification_key IS 'Verification key for the ZK proof';
COMMENT ON COLUMN zkml_proofs.verified IS 'Whether the proof has been verified';
COMMENT ON COLUMN zkml_proofs.blockchain_tx_hash IS 'Optional blockchain transaction hash for on-chain proof submission';